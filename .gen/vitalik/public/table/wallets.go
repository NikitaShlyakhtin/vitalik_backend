//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Wallets = newWalletsTable("public", "wallets", "")

type walletsTable struct {
	postgres.Table

	// Columns
	Address   postgres.ColumnString
	UserID    postgres.ColumnString
	Currency  postgres.ColumnString
	Balance   postgres.ColumnFloat
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WalletsTable struct {
	walletsTable

	EXCLUDED walletsTable
}

// AS creates new WalletsTable with assigned alias
func (a WalletsTable) AS(alias string) *WalletsTable {
	return newWalletsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WalletsTable with assigned schema name
func (a WalletsTable) FromSchema(schemaName string) *WalletsTable {
	return newWalletsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WalletsTable with assigned table prefix
func (a WalletsTable) WithPrefix(prefix string) *WalletsTable {
	return newWalletsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WalletsTable with assigned table suffix
func (a WalletsTable) WithSuffix(suffix string) *WalletsTable {
	return newWalletsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWalletsTable(schemaName, tableName, alias string) *WalletsTable {
	return &WalletsTable{
		walletsTable: newWalletsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newWalletsTableImpl("", "excluded", ""),
	}
}

func newWalletsTableImpl(schemaName, tableName, alias string) walletsTable {
	var (
		AddressColumn   = postgres.StringColumn("address")
		UserIDColumn    = postgres.StringColumn("user_id")
		CurrencyColumn  = postgres.StringColumn("currency")
		BalanceColumn   = postgres.FloatColumn("balance")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{AddressColumn, UserIDColumn, CurrencyColumn, BalanceColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, CurrencyColumn, BalanceColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return walletsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Address:   AddressColumn,
		UserID:    UserIDColumn,
		Currency:  CurrencyColumn,
		Balance:   BalanceColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
