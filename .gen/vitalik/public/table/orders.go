//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Orders = newOrdersTable("public", "orders", "")

type ordersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	Type         postgres.ColumnString
	SellCurrency postgres.ColumnString
	SellQuantity postgres.ColumnFloat
	SellAddress  postgres.ColumnString
	SellUserID   postgres.ColumnString
	Price        postgres.ColumnFloat
	BuyCurrency  postgres.ColumnString
	BuyQuantity  postgres.ColumnFloat
	BuyAddress   postgres.ColumnString
	BuyUserID    postgres.ColumnString
	Status       postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	RemovedAt    postgres.ColumnTimestampz
	ClosedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrdersTable struct {
	ordersTable

	EXCLUDED ordersTable
}

// AS creates new OrdersTable with assigned alias
func (a OrdersTable) AS(alias string) *OrdersTable {
	return newOrdersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrdersTable with assigned schema name
func (a OrdersTable) FromSchema(schemaName string) *OrdersTable {
	return newOrdersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrdersTable with assigned table prefix
func (a OrdersTable) WithPrefix(prefix string) *OrdersTable {
	return newOrdersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrdersTable with assigned table suffix
func (a OrdersTable) WithSuffix(suffix string) *OrdersTable {
	return newOrdersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrdersTable(schemaName, tableName, alias string) *OrdersTable {
	return &OrdersTable{
		ordersTable: newOrdersTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newOrdersTableImpl("", "excluded", ""),
	}
}

func newOrdersTableImpl(schemaName, tableName, alias string) ordersTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		TypeColumn         = postgres.StringColumn("type")
		SellCurrencyColumn = postgres.StringColumn("sell_currency")
		SellQuantityColumn = postgres.FloatColumn("sell_quantity")
		SellAddressColumn  = postgres.StringColumn("sell_address")
		SellUserIDColumn   = postgres.StringColumn("sell_user_id")
		PriceColumn        = postgres.FloatColumn("price")
		BuyCurrencyColumn  = postgres.StringColumn("buy_currency")
		BuyQuantityColumn  = postgres.FloatColumn("buy_quantity")
		BuyAddressColumn   = postgres.StringColumn("buy_address")
		BuyUserIDColumn    = postgres.StringColumn("buy_user_id")
		StatusColumn       = postgres.StringColumn("status")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		RemovedAtColumn    = postgres.TimestampzColumn("removed_at")
		ClosedAtColumn     = postgres.TimestampzColumn("closed_at")
		allColumns         = postgres.ColumnList{IDColumn, TypeColumn, SellCurrencyColumn, SellQuantityColumn, SellAddressColumn, SellUserIDColumn, PriceColumn, BuyCurrencyColumn, BuyQuantityColumn, BuyAddressColumn, BuyUserIDColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, RemovedAtColumn, ClosedAtColumn}
		mutableColumns     = postgres.ColumnList{TypeColumn, SellCurrencyColumn, SellQuantityColumn, SellAddressColumn, SellUserIDColumn, PriceColumn, BuyCurrencyColumn, BuyQuantityColumn, BuyAddressColumn, BuyUserIDColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, RemovedAtColumn, ClosedAtColumn}
	)

	return ordersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Type:         TypeColumn,
		SellCurrency: SellCurrencyColumn,
		SellQuantity: SellQuantityColumn,
		SellAddress:  SellAddressColumn,
		SellUserID:   SellUserIDColumn,
		Price:        PriceColumn,
		BuyCurrency:  BuyCurrencyColumn,
		BuyQuantity:  BuyQuantityColumn,
		BuyAddress:   BuyAddressColumn,
		BuyUserID:    BuyUserIDColumn,
		Status:       StatusColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		RemovedAt:    RemovedAtColumn,
		ClosedAt:     ClosedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
