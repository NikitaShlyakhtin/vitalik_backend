//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transactions = newTransactionsTable("public", "transactions", "")

type transactionsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	SenderAddress   postgres.ColumnString
	SenderUserID    postgres.ColumnString
	ReceiverAddress postgres.ColumnString
	ReceiverUserID  postgres.ColumnString
	Amount          postgres.ColumnFloat
	Currency        postgres.ColumnString
	Purpose         postgres.ColumnString
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionsTable struct {
	transactionsTable

	EXCLUDED transactionsTable
}

// AS creates new TransactionsTable with assigned alias
func (a TransactionsTable) AS(alias string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionsTable with assigned schema name
func (a TransactionsTable) FromSchema(schemaName string) *TransactionsTable {
	return newTransactionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionsTable with assigned table prefix
func (a TransactionsTable) WithPrefix(prefix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionsTable with assigned table suffix
func (a TransactionsTable) WithSuffix(suffix string) *TransactionsTable {
	return newTransactionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionsTable(schemaName, tableName, alias string) *TransactionsTable {
	return &TransactionsTable{
		transactionsTable: newTransactionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newTransactionsTableImpl("", "excluded", ""),
	}
}

func newTransactionsTableImpl(schemaName, tableName, alias string) transactionsTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		SenderAddressColumn   = postgres.StringColumn("sender_address")
		SenderUserIDColumn    = postgres.StringColumn("sender_user_id")
		ReceiverAddressColumn = postgres.StringColumn("receiver_address")
		ReceiverUserIDColumn  = postgres.StringColumn("receiver_user_id")
		AmountColumn          = postgres.FloatColumn("amount")
		CurrencyColumn        = postgres.StringColumn("currency")
		PurposeColumn         = postgres.StringColumn("purpose")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampzColumn("updated_at")
		allColumns            = postgres.ColumnList{IDColumn, SenderAddressColumn, SenderUserIDColumn, ReceiverAddressColumn, ReceiverUserIDColumn, AmountColumn, CurrencyColumn, PurposeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns        = postgres.ColumnList{SenderAddressColumn, SenderUserIDColumn, ReceiverAddressColumn, ReceiverUserIDColumn, AmountColumn, CurrencyColumn, PurposeColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return transactionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		SenderAddress:   SenderAddressColumn,
		SenderUserID:    SenderUserIDColumn,
		ReceiverAddress: ReceiverAddressColumn,
		ReceiverUserID:  ReceiverUserIDColumn,
		Amount:          AmountColumn,
		Currency:        CurrencyColumn,
		Purpose:         PurposeColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
